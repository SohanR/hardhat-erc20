// SPDX-License-Identifier: MIT

pragma solidity 0.8.18;

contract ERC20 {

    uint256 public totalSupply;
    string public name;
    string public symbol;

    mapping(address => uint256) public balanceOf;
    mapping (address => mapping(address => uint256)) public allowance;

    constructor( string memory name_, string memory symbol_ ) {
        name = name_;
        symbol = symbol_;     

    }

    function decimals() external pure returns (uint8){
        return 18;
    }

    function transfer(address recipient, uinit256 amount) external returns (bool) {

        require(recipient != address(0), "ERC20: transfer to the zero address");       
        uint256 senderBalance = balanceOf[msg.sender];

        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        balanceOf[msg.sender] = senderBalance - amount;
        balanceOf[msg.sender] += amount;

        return true;
    }


        function _transfer(address sender,address recipient, uinit256 amount) private returns (bool) {

        require(recipient != address(0), "ERC20: transfer to the zero address");       
        uint256 senderBalance = balanceOf[sender];

        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        balanceOf[sender] = senderBalance - amount;
        balanceOf[sender] += amount;

        return true;
    }
}